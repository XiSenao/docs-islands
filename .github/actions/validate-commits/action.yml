name: "Validate Commit Messages"
description: "Validate commit messages against the project commit convention"

inputs:
  base_ref:
    description: "Base reference for comparison (e.g., origin/main)"
    required: false
    default: "origin/${{ github.base_ref }}"
  strict_mode:
    description: "Fail on style warnings (capitalize, period, imperative mood)"
    required: false
    default: "false"
  skip_merge_commits:
    description: "Skip validation of merge commits"
    required: false
    default: "true"

outputs:
  valid:
    description: "Whether all commits are valid"
    value: ${{ steps.validate.outputs.valid }}
  invalid_count:
    description: "Number of invalid commits"
    value: ${{ steps.validate.outputs.invalid_count }}
  warning_count:
    description: "Number of style warnings"
    value: ${{ steps.validate.outputs.warning_count }}

runs:
  using: "composite"
  steps:
    - name: Fetch base branch
      if: github.event_name == 'pull_request'
      shell: bash
      run: |
        echo "📥 Fetching base branch: ${{ github.base_ref }}"
        git fetch --no-tags origin +refs/heads/${{ github.base_ref }}:refs/remotes/origin/${{ github.base_ref }}

    - name: Validate commit messages
      id: validate
      shell: bash
      env:
        BASE_REF: ${{ inputs.base_ref }}
        STRICT_MODE: ${{ inputs.strict_mode }}
        SKIP_MERGE: ${{ inputs.skip_merge_commits }}
        EVENT_NAME: ${{ github.event_name }}
      run: |
        set -euo pipefail

        readonly COMMIT_REGEX="^(revert: )?(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\(.+\))?!?: .{1,50}$"
        readonly VALID_TYPES="feat|fix|docs|style|refactor|perf|test|build|ci|chore"

        set_output() {
          echo "$1=$2" >> "$GITHUB_OUTPUT"
        }

        init_outputs() {
          set_output "valid" "false"
          set_output "invalid_count" "0"
          set_output "warning_count" "0"
        }

        # Check if commit is a merge commit
        is_merge_commit() {
          local commit_hash="$1"
          local parent_count
          parent_count=$(git rev-list --parents -n 1 "$commit_hash" | awk '{print NF-1}')
          [ "$parent_count" -gt 1 ]
        }

        # Validate single commit message
        validate_commit_msg() {
          local msg="$1"
          echo "$msg" | grep -qE "$COMMIT_REGEX" || return 1
          return 0
        }

        # Get detailed error for invalid commit
        get_error_detail() {
          local msg="$1"
          
          if ! (echo "$msg" | grep -qE "^(revert: )?($VALID_TYPES)"); then
            echo "Invalid type (use: feat, fix, docs, style, refactor, perf, test, build, ci, chore)"
          elif ! (echo "$msg" | grep -qE "^(revert: )?($VALID_TYPES)(\(.+\))?!?:"); then
            echo "Missing colon after type/scope"
          elif (echo "$msg" | grep -qE "^(revert: )?($VALID_TYPES)(\(.+\))?!?: .{51,}"); then
            echo "Subject exceeds 50 characters"
          elif (echo "$msg" | grep -qE "^(revert: )?($VALID_TYPES)(\(.+\))?!?: *$"); then
            echo "Empty subject"
          else
            echo "Invalid format"
          fi
        }

        check_style() {
          local msg="$1"
          local subject
          local issues=""
          
          subject=$(echo "$msg" | sed -E "s/^(revert: )?($VALID_TYPES)(\(.+\))?!?: //")
          
          echo "$subject" | grep -qE "^[A-Z]" && issues="${issues}capitalized " || true
          echo "$subject" | grep -qE "\.$" && issues="${issues}period " || true
          echo "$subject" | grep -qE "^(added|changed|fixed|removed|updated|modified|created|deleted)" && issues="${issues}past-tense " || true
          
          echo "$issues"
        }

        echo "📝 Validating commit messages..."
        init_outputs

        # Determine commit range
        if [ -n "${BASE_REF:-}" ] && git rev-parse "$BASE_REF" >/dev/null 2>&1; then
          COMMIT_RANGE="$BASE_REF..HEAD"
        elif git rev-parse HEAD~1 >/dev/null 2>&1; then
          COMMIT_RANGE="HEAD~1..HEAD"
        else
          COMMIT_RANGE="HEAD"
        fi

        # Get commits
        mapfile -t commits < <(git log --format="%H %s" "$COMMIT_RANGE" 2>/dev/null || true)

        if [ ${#commits[@]} -eq 0 ]; then
          echo "⚠️  No commits found"
          set_output "valid" "true"
          exit 0
        fi

        echo "📊 Found ${#commits[@]} commit(s)"
        echo ""

        # Validate commits
        declare -a invalid_commits=()
        declare -a warnings=()
        declare -i validated_count=0
        declare -i skipped_count=0

        for commit_line in "${commits[@]}"; do
          commit_hash="${commit_line%% *}"
          commit_msg="${commit_line#* }"
          
          # Skip merge commits if enabled
          if [ "$SKIP_MERGE" = "true" ] && is_merge_commit "$commit_hash"; then
            echo "⏭️  Skip: ${commit_hash:0:8} (merge commit)"
            skipped_count=$((skipped_count + 1))
            continue
          fi
          
          validated_count=$((validated_count + 1))
          
          # Validate format
          if ! validate_commit_msg "$commit_msg"; then
            invalid_commits+=("${commit_hash:0:8}: $commit_msg")
            error_detail=$(get_error_detail "$commit_msg")
            echo "❌ ${commit_hash:0:8}: $error_detail"
            echo "   $commit_msg"
          else
            # Check style
            style_issues=$(check_style "$commit_msg")
            if [ -n "$style_issues" ]; then
              warnings+=("${commit_hash:0:8}: [$style_issues]")
              echo "⚠️  ${commit_hash:0:8}: Style issues: $style_issues"
            else
              echo "✅ ${commit_hash:0:8}"
            fi
          fi
        done

        # Summary
        echo ""
        echo "═══════════════════════════════════════════════"
        echo "Summary: $validated_count validated, $skipped_count skipped"
        echo "Invalid: ${#invalid_commits[@]}, Warnings: ${#warnings[@]}"
        echo "═══════════════════════════════════════════════"
        echo ""

        # Set outputs
        set_output "invalid_count" "${#invalid_commits[@]}"
        set_output "warning_count" "${#warnings[@]}"

        # Handle results
        if [ ${#invalid_commits[@]} -eq 0 ]; then
          set_output "valid" "true"
          
          # Strict mode check
          if [ "$STRICT_MODE" = "true" ] && [ ${#warnings[@]} -gt 0 ]; then
            echo "❌ Strict mode: Style warnings not allowed"
            echo ""
            echo "Style guidelines:"
            echo "  • Use lowercase for subject start"
            echo "  • No period at the end"
            echo "  • Use imperative mood (e.g., 'add' not 'added')"
            exit 1
          fi
          
          echo "✅ All commits are valid"
          if [ ${#warnings[@]} -gt 0 ]; then
            echo "💡 Consider fixing ${#warnings[@]} style issue(s)"
          fi
          exit 0
        else
          echo "❌ Found ${#invalid_commits[@]} invalid commit(s):"
          echo ""
          for commit in "${invalid_commits[@]}"; do
            echo "  • $commit"
          done
          echo ""
          echo "📖 Format: <type>(<scope>): <subject>"
          echo "   Example: feat(api): add user endpoint"
          exit 1
        fi

    - name: Create annotation
      if: failure()
      shell: bash
      run: |
        echo "::error::Found ${{ steps.validate.outputs.invalid_count }} invalid commit(s). See .github/commit-convention.md"
